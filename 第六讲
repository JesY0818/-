  
  // 定义构造函数
  Particle(float x, float y) {
    position = new PVector(x, y); // 随机初始化位置
    velocity = PVector.random2D(); // 随机初始化速度
    acceleration = new PVector(); // 初始化加速度为零
    diameter = random(1, D); // 随机初始化直径
    c = color( random(100), random(250),random(190),random(200)); // 随机初始化颜色
    theta = random(TWO_PI); // 随机初始化角度
    r = random(80, 300); // 随机初始化半径
  }
  
  // 定义方法
  // 更新粒子的状态
  void update() {
    theta += 0.01; // 增加角度
    position.x = r * cos(theta); // 根据半径和角度计算x坐标
    position.y = r * sin(theta); // 根据半径和角度计算y坐标
    c = lerpColor(color(0, 100, 100), color(240, 100, 100), position.x / width); // 根据粒子的x坐标插值颜色
  }
  
  // 绘制粒子
  void display() {
    fill(c); // 填充颜色
    noStroke(); // 取消描边
    pushMatrix(); // 保存当前矩阵
    translate(width/2, height/2); // 平移坐标系到画布中心
    ellipse(position.x, position.y, diameter, diameter); // 画椭圆
    popMatrix(); // 恢复之前的矩阵
  }
  
  // 计算粒子之间的作用力
  void applyForce(Particle other) {
    PVector force = PVector.sub(other.position, position); // 计算两个粒子之间的距离向量
    float distance = force.mag(); // 计算两个粒子之间的距离
    force.normalize(); // 单位化距离向量
    if (distance < (diameter + other.diameter) / 2) { // 如果两个粒子相交
      force.mult(-R); // 计算斥力
    } else { // 如果两个粒子不相交
      force.mult(G * M * M / (distance * distance)); // 计算引力
    }
    position.add(PVector.div(force, M)); // 根据牛顿第二定律计算位置的变化
  }
  
  // 处理边界条件
  void checkEdges() {
    if (position.x < 0 || position.x > width) { // 如果粒子超出左右边界
      position.x = constrain(position.x, 0, width); // 限制位置的x坐标在边界内
    }
    if (position.y < 0 || position.y > height) { // 如果粒子超出上下边界
      position.y = constrain(position.y, 0, height); // 限制位置的y坐标在边界内
    }
  }
}

// 定义一个粒子数组
Particle[] particles = new Particle[N];

// 初始化函数
void setup() {
  size(800, 600); // 设置画布大小
  background(0); // 设置背景颜色为黑色
  colorMode(HSB, 360, 100, 100); // 设置颜色模式为HSB，色相范围为0-360，饱和度和亮度范围为0-100
  for (int i = 0; i < N; i++) { // 遍历粒子数组
    particles[i] = new Particle(random(width), random(height)); // 创建粒子对象
  }
}

// 绘制函数
void draw() {
  background(0); // 设置背景颜色为黑色
  frameRate(40); // 设置帧率为30
  for (int i = 0; i < N; i++) { // 遍历粒子数组
    for (int j = 0; j < i; j++) { // 遍历其他粒子
      particles[i].applyForce(particles[j]); // 计算粒子之间的作用力
    }
    particles[i].update(); // 更新粒子的状态
    particles[i].display(); // 绘制粒子
    particles[i].checkEdges(); // 处理边界条件
  }
}
